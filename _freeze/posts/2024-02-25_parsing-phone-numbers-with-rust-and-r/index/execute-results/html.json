{
  "hash": "18938a1ac04cdbb9c444c42ae3a76a60",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Parsing phone numbers with Rust and R\"\nauthor:\n  - name: David Schoch\n    orcid: 0000-0003-2952-4812\ndate: 2024-02-25\ncategories: [R,Rust]\n---\n\n\nOn my bucket list for 2024 is to learn a bit of Rust. After reading (well skimming...) [THE BOOK](https://doc.rust-lang.org/book/) and doing a [few experiments](https://github.com/schochastics/rust_playground), I wanted to give it a try to incorporate some Rust code in an R package. I chose to wrap the [phonenumber](https://crates.io/crates/phonenumber) crate to parse phone numbers into R, because I thought thats small enough of a task that I could manage. Note that there is already an R package for that, called [dialr](https://github.com/socialresearchcentre/dialr), which wraps Google's [libphonenumber](https://github.com/google/libphonenumber) Java library. For obvious reasons, my experimental package is called [dialrs](https://github.com/schochastics/dialrs). \n\n![](dialrs.png){width=350px fig-align=\"center\"}\n\nAs a small disclaimer, I am far from being an expert with Rust, so don't take this package of an example of best practices in (wrapped) Rust.\n\n## Setup\n\nSetting up a package for Rust code is extremely simple. All you need is the [rextendr](https://github.com/extendr/rextendr) package which allows to call Rust code from R. [A vignette](https://extendr.github.io/rextendr/articles/package.html) explains how to use it within an R package. \n\nTwo commands are enough to get you started with a package.\n```r\nusethis::create_package(\"dialrs\")\nrextendr::use_extendr()\n```\nThe function `use_extendr()` creates a whole bunch of files and directories (see the vignette for help). The most important ones are `src/rust/Cargo.toml` to include crates as dependencies and `src/rust/src/lib.rs` where most of the Rust code will live. You can also have the code in different files, say `phone.rs`, but then there needs to be a line\n\n```rust\nmod phone\n```\n\nin `libs.rs`.  \nTo compile the code, we need to run `rextendr::document()` (similar to `devtools::document()`)\n\n## The rest of the f**** packages\n\n![](owl.jpg){fig-align=\"center\"}\n\nImplementing the actual package really felt like that old owl meme. Sure, the setup is incredibly easy, but you still need to write the Rust code yourself. Surprisingly. There was lot of trial and error but eventually, I got the following stack of functions to work properly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dialrs)\nnumbers <- c(\"+1 202-555-0173\", \"+33 122 334 455\", \"+1 1 800 FLOWERS\")\nphone_is_valid(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nphone_type(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"fixed_line_or_mobile\" \"fixed_line\"           \"unknown\"             \n```\n\n\n:::\n\n```{.r .cell-code}\nphone_country_code(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1 33  1\n```\n\n\n:::\n\n```{.r .cell-code}\nphone_parse(numbers, format = \"International\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"+1 202-555-0173\"   \"+33 1 22 33 44 55\" \"+1 18003569377\"   \n```\n\n\n:::\n\n```{.r .cell-code}\nphone_parse(numbers, format = \"National\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(202) 555-0173\" \"01 22 33 44 55\" \"18003569377\"   \n```\n\n\n:::\n\n```{.r .cell-code}\nphone_parse(numbers, format = \"RFC3966\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tel:+1-202-555-0173\"   \"tel:+33-1-22-33-44-55\" \"tel:+1-18003569377\"   \n```\n\n\n:::\n\n```{.r .cell-code}\nphone_parse(numbers, format = \"E.164\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"+12025550173\"  \"+33122334455\"  \"+118003569377\"\n```\n\n\n:::\n:::\n\n\nFeel free to check out my [`libs.rs`](https://github.com/schochastics/dialrs/blob/main/src/rust/src/lib.rs) for pointers to use Rust with R and of course to correct my horrible style.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}