{
  "hash": "d88491390911422255f24edd6f221db7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"dexid: Fun Memorable Identifiers with Pokémon names\"\nauthor:\n- name: David Schoch\n  orcid: 0000-0003-2952-4812\ndate: '2025-07-28'\ncategories:\n- R\n- package\n---\n\nThe `dexid` package provides a playful way to generate readable identifiers by combining adjectives with Pokémon names. \nThis can be useful for naming test fixtures, docker containers, or any other situation where you need memorable IDs.\n\n![](dexid.png){fig-align=\"center\"}\n\nYou can install the development version from GitHub:\n\n```r\npak::pak(\"schochastics/dexid\")\n```\n\n## Basic Usage\n\nThe main function `dexid()` generates snake_case IDs by default:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dexid)\n\ndexid(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"old_pachirisu\"     \"trivial_spectrier\" \"light_indeedee\"   \n[4] \"rusty_tarountula\"  \"plain_sunflora\"   \n```\n\n\n:::\n:::\n\n\nUsing the `case` argument, you can change the style of the generated IDs. The function supports all cases available in the [`snakecase`](https://github.com/Tazinho/snakecase) package and kebab-case.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(dexid(1, case = \"kebab\"),\n  dexid(1, case = \"small_camel\"),\n  dexid(1, case = \"upper_camel\"),\n  dexid(1, case = \"title\"),\n  dexid(1, case = \"all_caps\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"crushing-hitmonlee\" \"mortifiedObstagoon\" \"WordyHoppip\"       \n[4] \"Constant Salamence\" \"GLUM_CONKELDURR\"   \n```\n\n\n:::\n:::\n\n\nFor more uniqueness, you can either increase the number of added ajectives or add random digits to the end of the identifiers. This is useful when you need to ensure that the generated IDs are unique across different runs or contexts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndexid(5, n_adj = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"genuine_real_lombre\"         \"direct_conscious_iron_crown\"\n[3] \"powerless_cute_lickilicky\"   \"forsaken_closed_snorunt\"    \n[5] \"grizzled_defiant_slowpoke\"  \n```\n\n\n:::\n\n```{.r .cell-code}\ndexid(5, add_digits = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sweltering_nacli_5590\"    \"free_kabutops_7425\"      \n[3] \"content_purugly_8740\"     \"droopy_walking_wake_6584\"\n[5] \"remote_duraludon_7870\"   \n```\n\n\n:::\n:::\n\n\nThe package includes 1347 adjectives and 1025 Pokémon names, allowing for 1,380,675 unique combinations with one adjective and 1,859,769,225 unique combinations with two adjectives.\n\n\nIf you want to generate identifiers based on specific Pokémon generations, you can specify the `gen` argument. For example, to generate IDs from only Generation 1 Pokémon:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndexid(5, gen = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aware_zapdos\"       \"impure_haunter\"     \"wise_kangaskhan\"   \n[4] \"bulky_spearow\"      \"amusing_wigglytuff\"\n```\n\n\n:::\n:::\n\n\n\n\n## Fun Pokémon Sentences\n\nThe package also includes a sentence generator that combines Pokémon with moves:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndex_sentence(5, gen = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Lean krabby uses sleep powder thoroughly\"     \n[2] \"Colorful wartortle uses rock throw wisely\"    \n[3] \"Fat clefairy uses flamethrower warmly\"        \n[4] \"Tough nidorino uses acid armor instantly\"     \n[5] \"Lovely magneton uses double slap successfully\"\n```\n\n\n:::\n:::\n\n\nThe sentence structure is always adjective + Pokémon name + \"uses\" + move + adverb.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}