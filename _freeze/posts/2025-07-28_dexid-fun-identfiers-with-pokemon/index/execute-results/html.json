{
  "hash": "6026af4c0daaf29b24d9a84a30e37919",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"dexid: Fun Memorable Identifiers with Pokémon names\"\nauthor:\n- name: David Schoch\n  orcid: 0000-0003-2952-4812\ndate: '2025-07-28'\ncategories:\n- R\n- package\n---\n\nThe `dexid` package provides a playful way to generate readable identifiers by combining adjectives with Pokémon names. \nThis can be useful for naming test fixtures, docker containers, or any other situation where you need memorable IDs.\n\n![](dexid.png){fig-align=\"center\"}\n\nYou can install the development version from GitHub:\n\n```r\npak::pak(\"schochastics/dexid\")\n```\n\n## Basic Usage\n\nThe main function `dexid()` generates snake_case IDs by default:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dexid)\n\ndexid(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"virtual_pinsir\"    \"excited_throh\"     \"cautious_articuno\"\n[4] \"upset_gossifleur\"  \"oddball_landorus\" \n```\n\n\n:::\n:::\n\n\nUsing the `case` argument, you can change the style of the generated IDs. The function supports all cases available in the [`snakecase`](https://github.com/Tazinho/snakecase) package and kebab-case.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(dexid(1, case = \"kebab\"),\n  dexid(1, case = \"small_camel\"),\n  dexid(1, case = \"upper_camel\"),\n  dexid(1, case = \"title\"),\n  dexid(1, case = \"all_caps\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"colorless-vivillon\" \"misguidedSwampert\"  \"SelfishKleavor\"    \n[4] \"Stupendous Venonat\" \"RURAL_BULBASAUR\"   \n```\n\n\n:::\n:::\n\n\nFor (almost) guaranteed uniqueness, you can add random digits to the end of the identifiers. This is useful when you need to ensure that the generated IDs are unique across different runs or contexts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndexid(5, add_digits = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sturdy_surskit_3456\"  \"flaky_combusken_0665\" \"gentle_meganium_8990\"\n[4] \"stylish_chi_yu_4518\"  \"assured_heatmor_1261\"\n```\n\n\n:::\n:::\n\n\nIf you want to generate identifiers based on specific Pokémon generations, you can specify the `gen` argument. For example, to generate IDs from only Generation 1 Pokémon:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndexid(5, gen = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"single_kabuto\"      \"steep_eevee\"        \"gracious_growlithe\"\n[4] \"dreary_seadra\"      \"jagged_dugtrio\"    \n```\n\n\n:::\n:::\n\n\n## Fun Pokémon Sentences\n\nThe package also includes a sentence generator that combines Pokémon with moves:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndex_sentence(5, gen = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Unwitting kabuto uses roar angrily\"              \n[2] \"Neglected golbat uses rolling kick loudly\"       \n[3] \"Gregarious tentacruel uses waterfall quizzically\"\n[4] \"Wealthy ekans uses double team rightfully\"       \n[5] \"Feline lickitung uses fury attack woefully\"      \n```\n\n\n:::\n:::\n\n\nThe sentence structure is always adjective + Pokémon name + \"uses\" + move + adverb.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}