---
title: 'shortuuid: Generate and Translate Standard UUIDs'
author:
- name: David Schoch
  orcid: 0000-0003-2952-4812
date: '2024-08-24'
categories:
- R
- package

---

The other day I stumbled upon this post on mastodon

<iframe src="https://fosstodon.org/@josi/112978240064605859/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen"></iframe><script src="https://fosstodon.org/embed.js" async="async"></script>

and I thought that this could be a nice evening challenge to implement. At the end, it took longer than an evening but at least I learned a lot about UUIDs and base58 encoding.  

![](logo.png){fig-align="center"}

## What are UUIDs?

UUIDs are 128-bit values used to uniquely identify information in computer systems. Unlike traditional incremental IDs, UUIDs are designed to be unique across all space and time, making them ideal for systems where data is created across different machines, environments, or even different points in time. The magic of UUIDs lies in their ability to reduce the risk of duplication to nearly zero, even when generated independently by multiple sources.

## What is Base58 encoding?

Base58 encoding is a specialized method of encoding binary data into a shorter, more readable string format, primarily designed to be more human-friendly. It uses a subset of 58 alphanumeric characters, intentionally omitting potentially confusing characters like "0" (zero), "O" (capital o), "I" (uppercase i), and "l" (lowercase L). This encoding is particularly popular in applications where clarity and brevity are essential, such as in cryptocurrencies (e.g., Bitcoin addresses) and compact data representations. By reducing the chance of transcription errors and producing shorter strings, Base58 encoding is a practical choice for creating cleaner, more user-friendly representations of data like UUIDs.

## Installation

You can install the development version of shortuuid like so:

``` r
remotes::install_github("schochastics/shortuuid")
#or
pak::pak("schochastics/shortuuid")
```
```{r}
library(shortuuid)
```

## Example

The package implements a method to generate valid random uuids and two encoders/decoders using slight variations of the same alphabet. 

```{r example}
library(shortuuid)
# generate random uuids
ids <- generate_uuid(n = 5)
ids
is.uuid(ids)

# alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
b58 <- uuid_to_bitcoin58(ids)
b58

# alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
f58 <- uuid_to_flickr58(ids)
f58
# convert back
bitcoin58_to_uuid(b58)
flickr58_to_uuid(f58)
```

## Addendum

Code to generate uuids taken from [@rkg8](https://github.com/rkg82/uuid-v4)
