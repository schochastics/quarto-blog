---
title: Be kind don't rbind
author:
- name: David Schoch
  orcid: 0000-0003-2952-4812
date: '2024-02-13'
categories: R

---

The other day I was helping to refactor an R package and came across one
of the biggest performance blockers there is: dynamically growing matrices.
Of course I repeated the mantra "Always preallocate your variables" but in this case,
it is not clear how big (in terms of rows) the final matrix will be. So there is no
way around growing the matrix dynamically. 

The chosen approach in the package was to use `rbind` similar to this

```r
mat <- vector()
while(<condition>) {
    if(<condition>) {
        tmp <- <do calculation>
        mat <- rbind(mat, tmp)
    }
}
```

Disregarding performance, this seems like a sensible approach. Just add new rows to the end of the matrix. But a little bit of profiling showed that this was an extreme bottleneck in the function it appears. So what are viable alternatives? let's benchmark some solutions. Note that we assume to know `n` here but in reality, we do not know how big it will be at the end.

As a baseline we implement a function that preallocates memory. 

```{r}
fmat <- function(n) {
    res <- matrix(NA, n, n)
    for (i in 1:n) {
        res[i, ] <- runif(n)
    }
    res
}
```

The first contender is the `rbind` approach.

```{r}
frbind <- function(n) {
    res <- vector()
    for (i in 1:n) {
        res <- rbind(res, runif(n))
    }
    res
}
```

For the second approach, we try to reduce the number of rbinds by growing the final matrix in chunks. For `csize = 1` we obtain `frbind()` and `csize = n` we have `fmat()`.

```{r}
fchunks <- function(n, csize = 10) {
    chunk <- matrix(NA, csize, n)
    res <- vector()
    for (i in 1:n) {
        if (i %% csize == 0) {
            chunk[csize, ] <- runif(n)
            res <- rbind(res, chunk)
            chunk <- matrix(NA, csize, n)
        } else {
            chunk[i %% csize, ] <- runif(n)
        }
    }
    res[!is.na(res[, 1]), ]
}
```

The last approach is to grow list which is converted to a matrix at the end.

```{r}
flist <- function(n) {
    res <- list()
    for (i in 1:n) {
        res[[length(res) + 1]] <- runif(n)
    }
    do.call(rbind, res)
}
```


```{r}
n <- 1000
bench <- microbenchmark::microbenchmark(
    fmat(n),
    frbind(n),
    fchunks(n, csize = 10),
    flist(n),
    times = 1, unit = "ms"
)
```


```{r}
#| echo: false
rmr <- function(res, order = "median") {
    stopifnot("Argument 'res' must be a 'microbenchmark' result" = inherits(res, "microbenchmark"))

    smry <- summary(res)
    res$expr <- factor(res$expr,
        levels = levels(res$expr)[order(smry[["median"]])],
        ordered = TRUE
    )
    res
}
knitr::kable(summary(rmr(bench)))
```

The performance of the `rbind` approach is really terrifyingly bad. The list approach on the other hand is extremely efficient. It performs equally well as the preallocated matrix approach. I unfortunately lack the understanding of the R internals here, but it seems as if dynamically growing a list does not have any (or at least not much) overhead.

**Update**  

[LluÃ­s Revilla](https://fosstodon.org/@Lluis_Revilla/111923091333392166) suggested that `cbind` might be more efficient than `rbind`, given that R mostly deals in columns.

```{r}
fcbind <- function(n) {
    res <- vector()
    for (i in 1:n) {
        res <- cbind(res, runif(n))
    }
    t(res)
}
```


```{r}
n <- 1000
bench <- microbenchmark::microbenchmark(
    fmat(n),
    frbind(n),
    fcbind(n),
    fchunks(n, csize = 10),
    flist(n),
    times = 1, unit = "ms"
)
```

```{r}
#| echo: false
knitr::kable(summary(rmr(bench)))
```

So `cbind` is indeed a lot faster than `rbind`, but still much worse than the `list` approach.


```{r}
#| include: false
#| eval: false

Rcpp::cppFunction(
    "
    NumericMatrix frbind_cpp(int numIterations) {
    std::vector<NumericVector> rows;

    // Assuming numIterations determines how many times you want to add a new row
    for(int i = 0; i < numIterations; i++) {
        // Simulate generating a new row, the size of the row (n) is dynamically determined here
        // For illustration, we use runif(5) to generate 5 random numbers
        // In practice, the size and content of each row could vary based on your application's logic
        NumericVector newRow = runif(5);
        rows.push_back(newRow);
    }

    // Now, convert the std::vector of NumericVectors into a NumericMatrix
    int numRows = rows.size();
    int numCols = rows[0].size(); // Assuming all rows have the same length
    NumericMatrix res(numRows, numCols);

    for (int i = 0; i < numRows; i++) {
        res.row(i) = rows[i];
    }

    return res;
    }
    "
)

```
