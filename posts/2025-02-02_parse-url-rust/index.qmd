---
title: Fast url parsing in R with Rust
author:
- name: David Schoch
  orcid: 0000-0003-2952-4812
date: '2025-02-02'
categories:
- R
- Rust
- package
---

This post is the conclusion (for now) of my second miniseries on Rust in R. My first series was about building two R packages without much context ([part1](https://blog.schochastics.net/posts/2024-02-23_parsing-phone-numbers-with-rust-and-r/index.html), [part2](https://blog.schochastics.net/posts/2024-02-27_chronos-fast-general-purpose-datetime-converter/index.html)) and the second about how to comunicate between Rust and R ([part1](https://blog.schochastics.net/posts/2025-01-29_rust-in-r-beyond-vectors/index.html), [part2](https://blog.schochastics.net/posts/2025-01-30_data-frames-in-rust/index.html)). In this post, I will introduce a small package, [urlparser](https://github.com/schochastics/urlparser) which wraps the [url](https://crates.io/crates/url) crate to parse urls.

## Setting up the package

Thanks to `usethis` and `rextendr`, setting up a new package that uses Rust code is incredibly simple.
You can get a large chunk of the work done in three lines of R code.

```r
usethis::create_package("urlparser")
rextendr::use_extendr()
rextendr::use_crate("url", version = "2.5.4")
```

This sets up everything you need and all that is left to do is write the Rust code in `/src/rust/src/lib.rs`.
In our case, we just need to wrap one single function `parse`. The function takes a url as a string and extracts the different parts of the url. These parts, we want to store in a data frame.

```rust
#[derive(Debug, IntoDataFrameRow)]
struct ParsedUrl {
  url: String,
  scheme: String,
  host: String,
  port: String,
  path: String,
  query: String,
  fragment: String,
  username: String,
  password: String,
}

#[extendr]
fn url_parse(urls: Vec<String>) -> Dataframe<ParsedUrl> {
  urls.into_iter()
    .map(|url| {
      let parsed_url = Url::parse(&url);
      let (scheme, host, port, path, query, fragment, username, password) =
        parsed_url.as_ref().ok().map_or_else(
          || Default::default(),
          |p| (
            p.scheme().to_string(),
            p.host_str().unwrap_or("").to_string(),
            p.port().map_or_else(String::new, |p| p.to_string()),
            p.path().to_string(),
            p.query().unwrap_or("").to_string(),
            p.fragment().unwrap_or("").to_string(),
            p.username().to_string(),
            p.password().unwrap_or("").to_string(),
          ),
        );

        ParsedUrl {
            url,
            scheme,
            host,
            port,
            path,
            query,
            fragment,
            username,
            password,
        }
        })
        .collect::<Vec<_>>() 
        .into_dataframe() 
        .unwrap()
}
```

If you have followed the last two posts, you should understand what is going on here, although it is a bit more complex. `struct ParsedUrl` defines what a row in our final data frame should look like and `fn url_parse()` uses `Url::parse` to extract the different parts of the url. On the R side of the package I just added a small wrapper around it

```r
rs_url_parse <- function(url){
  url_parse(url)
}
```

And just like that, we are done. What remains is to check how the package compares to existing solutions.

## Benchmark

We compare the performance of the package with [adaR](https://github.com/gesistsa/adaR), an R package to parse URLs that wraps the C++ library [ada-url](https://github.com/ada-url/ada). I have also blogged about the creation of that package ([link](https://github.com/ada-url/ada)). 

Let us look at an example what both packages return.
```{r}
#| label: long_example
urlparser::rs_url_parse(
  "https://user_1:password_1@example.org:8080/dir/../api?q=1#frag"
) |>
  str()
adaR::ada_url_parse(
  "https://user_1:password_1@example.org:8080/dir/../api?q=1#frag"
) |>
  str()
```

The naming scheme is a bit different, but they essentially return the exact same result.

I will skip correctness benchmarks here and skip right to the runtime, because that is what interested me the most.
We take a list of diverse urls provided from [ada-url](https://github.com/ada-url/url-various-datasets) for this purpose

```{r}
#| label: load_ada-data
#| cache: true
top100 <- readLines(
  "https://raw.githubusercontent.com/ada-url/url-various-datasets/main/top100/top100.txt"
)
top100[1:20]
length(top100)
```

```{r}
#| warning: false
bench::mark(
  check = FALSE,
  adaR = adaR::ada_url_parse(top100),
  rust = urlparser::rs_url_parse(top100)
)
```

Our simple package outperforms adaR with a factor of 2. That is wild to me, given how much time we spent on optimizing the interface between R and C++ to create as little overhead as possible. Here, we did not do any real optimization efforts, so the performance boost can probably be attributed to Rust alone.

It might seem flashy but you should still take these results with a grain of salt. While `adaR` is also relatively new, I'd still say that it is far more robust than the package we built here. No testing beyond eyeballing has been done so far. Maybe jsut take the result as a proof of concept on how quickly one can spin up a solution in Rust that could speed up your own workflows, without spending too much time in optimizing the code/interface.