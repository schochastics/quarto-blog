---
title: "Working with R data.frames in Rust"
author:
  - name: David Schoch
    orcid: 0000-0003-2952-4812
date: 2024-01-31
categories: [R, rust]
---

The content of this post is actually what I wanted to do in my [last](https://blog.schochastics.net/posts/2025-01-29_rust-in-r-beyond-vectors/). However, I went down so many rabbit holes when researching the topic that I decided to split it into a more general exploration of working with non-standard types and a post that is specifically dedicated to data frames.  

I have to add the same disclaimer to this post as to the last: I am still a beginner in Rust, trying to figure things out. My main goal for now is not to write perfect/best practice Rust code, but to be able to call Rust from R (and send things to Rust from R) that goes beyond simple vectors and does what I want it to do.

## Existing frameworks

Data frames in R are essential because they provide a structured, table-like format for handling heterogeneous data, seamlessly integrating numeric, character, and factor variables within a single dataset. Their flexibility, built-in functions, and compatibility with Râ€™s data manipulation packages (like the `tidyverse`) make them the go-to structure for efficient data analysis and visualization. 

For general data science, there is the crate [polars](https://docs.rs/polars/latest/polars/). Polars is extremely powerful and we can already benefit from it in R with [r-polars](https://github.com/pola-rs/r-polars). The syntax might be a bit strange for newcomers, but there 
is [tidypolars](https://github.com/etiennebacher/tidypolars) which promisses to provide a polars backend for the `tidyverse`. What this essentially means is that you can keep your `tidyverse` code while using polars in the background. That is a pretty awesome prospect and we might see this far more use cases in the future. 

But we are not as ambitious in this post. All we want is to create a data frame in Rust and bring it to R.

## 

