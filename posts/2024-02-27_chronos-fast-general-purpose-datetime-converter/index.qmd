---
title: 'timeless: A fast general purpose datetime parser'
author:
- name: David Schoch
  orcid: 0000-0003-2952-4812
date: '2024-02-27'
categories:
- R
- package
- Rust
execute: 
  warning: false
---

**Update II**: 
**The package was renamed from `chronos` to `timeless` due to a name clash with a Biocundoctor package.**

**Update I**:  
*The code of this post was rerun 2024-02-28 after a small [performance boost](https://github.com/schochastics/chronos/issues/13) was implemented.*

This post introduces the R package [timeless](https://github.com/schochastics/timeless/), a fast general purpose date/time converter written in Rust with crates [dateparser](https://crates.io/crates/dateparser) and [chrono](https://crates.io/crates/chrono). This is the second outcome of my adventure of [learning Rust](http://blog.schochastics.net/posts/2024-02-23_parsing-phone-numbers-with-rust-and-r/).[^1] 

The package essentially does what [anytime](https://github.com/eddelbuettel/anytime) does, but it appears to do so a bit more efficiently.

![](logo.png){fig-align="center"}

## Installation

You can install the development version of timeless like so:

``` r
remotes::install_github("schochastics/timeless")
#or
pak::pak("schochastics/timeless")
```


```{r}
library(timeless)
```

## Formats

`timeless` understands many different date(time) formats out of the box. A subset is included as a small benchmark dataset.
```{r}
bench_date
```

`chronos()` is the powerhouse of the package and tries as hard as possible to parse every input into either
a date or a datetime, depending on `out_format`. The function can also return a raw character vector which can be fed into faster
converters, such as [fasttime](https://github.com/s-u/fasttime).

```{r}
chronos(bench_date, out_format = "datetime")
```

## Functions

Under the hood `chronos()` calls three functions which can also be used in isolation:

- `parse_datetime()`: a fast datetime parser that tries several different formats until it can parse the input

- `parse_date()`: a fast date parser that tries several different formats until it can parse the input

- `parse_epoch()`: a fast epoch timestamp parser

## anytime

```{r}
library(anytime)
```

[anytime](https://github.com/eddelbuettel/anytime) is certainly the most accepted general purpose date(time) converter to date.

It does not recognize all accepted formats of `timeless` out of the box. However, the unrecognized formats can easily be added via `anytime::addFormats()`.
```{r}
dplyr::coalesce(
  anytime(bench_date),
  anydate(bench_date)
)
```

The full list of formats supported can be retrieved with `anytime::getFormats()`. `timeless` implements all these formats natively too.

## Benchmark

The benchmark is done with three datasets that contain a variety of different date(time) formats.

```{r}
#| label: read_data

bench_datetimes <- readLines("datetime1000.txt")
head(bench_datetimes)
bench_epochs <- readLines("epoch500.txt")
head(bench_epochs)
bench_dates <- readLines("dates500.txt")
head(bench_dates)
bench <- c(bench_datetimes, bench_epochs, bench_dates)
```

## Ability to parse

This benchmark just checks **if** something was parsed and does **not** say if the result is actually correct.

```{r}
#| label: parse_ability
sum_na <- function(x) sum(is.na(x))
data.frame(
  type = c("datetimes", "epochs", "dates", "all"),
  chronos = c(
    sum_na(chronos(bench_datetimes)),
    sum_na(chronos(bench_epochs)),
    sum_na(chronos(bench_dates, out_format = "date")),
    sum_na(chronos(bench))
  ),
  anytime = c(
    sum_na(anytime(bench_datetimes)),
    sum_na(anytime(as.numeric(bench_epochs))),
    sum_na(anydate(bench_dates)),
    sum_na(anytime(bench))
  )
)
```

When epoch times are encoded as characters (which happens when all data is put together in one vector), then anytime fails to parse most of the epoch times.

## Runtime

The package [fasttime](https://github.com/s-u/fasttime) can be used together with `timeless` to convert larger sets of datetimes by letting chronos return a character vector which is then parsed by `fastPOSIXct` or `fastDate`.
```{r}
#| label: fast_chronos

fast_chronos <- function(x, out_format = "datetime") {
  res <- chronos(x, out_format = "character")
  if (out_format == "datetime") {
    return(fasttime::fastPOSIXct(res))
  } else {
    return(fasttime::fastDate(res))
  }
}
```

### Full data
```{r}
#| label: bench_all
mb <- microbenchmark::microbenchmark(
  chronos = chronos(bench),
  fast_chronos = fast_chronos(bench),
  anytime = anytime(bench),
  times = 100L
)
ggplot2::autoplot(mb)
```

### datetime
```{r}
#| label: bench_datetime
mb <- microbenchmark::microbenchmark(
  chronos = chronos(bench_datetimes),
  fast_chronos = fast_chronos(bench_datetimes),
  anytime = anytime(bench_datetimes),
  times = 100L
)
ggplot2::autoplot(mb)
```

### epoch
```{r}
#| label: bench_epoch
bench_epochs_num <- as.integer(bench_epochs)
mb <- microbenchmark::microbenchmark(
  chronos = chronos(bench_epochs_num),
  fast_chronos = fast_chronos(bench_epochs_num),
  anytime = anytime(bench_epochs_num),
  posix = as.POSIXct(bench_epochs_num),
  fastposix = fasttime::fastPOSIXct(bench_epochs_num),
  times = 100L
)
ggplot2::autoplot(mb)
```

When the input vector only consists of epoch timestamps, it is best to parse them directly with `as.POSIXct`.

### date
```{r}
#| label: bench_date
mb <- microbenchmark::microbenchmark(
  chronos = chronos(bench_date, out_format = "date"),
  fast_chronos = fast_chronos(bench_date, out_format = "date"),
  anytime = anydate(bench_date),
  times = 100L
)
ggplot2::autoplot(mb)
```

## Disclaimer
While it might seem that `timeless` has an edge over `anytime`, it is far less battle tested and
mature (Date parsing can be as tricky as [URL parsing](http://blog.schochastics.net/posts/2023-10-01_adar-an-accurate-fast-and-whatwg-compliant-url-parser/)). I am grateful for anyone who can take the package for a spin and report issues/make feature requests.


[^1]: I am now feeling more comfortable with the language and I am starting to really enjoy it. Pretty sure this will not be my last R package with Rust. 
