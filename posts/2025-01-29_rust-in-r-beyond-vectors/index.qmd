---
title: "Rust in R beyond vectors"
author:
  - name: David Schoch
    orcid: 0000-0003-2952-4812
date: 2025-01-29
categories: [R, rust]
---

I have blogged about using Rust in R twice before. Once about a [phone number parser](https://blog.schochastics.net/posts/2024-02-23_parsing-phone-numbers-with-rust-and-r/) called [dialrs](https://github.com/schochastics/dialrs) and once about a [datetime parser](https://blog.schochastics.net/posts/2024-02-27_chronos-fast-general-purpose-datetime-converter/) called [timeless](https://github.com/schochastics/timeless). There is a actually third post about [the archival of timeless](https://blog.schochastics.net/posts/2024-09-25_tales-from-os-dev-001) on CRAN due to 
some issues with the Rust policies. Both packages are really rudimentary in terms of the included Rust code. After all, I am still a beginner and quite happy if I get anything to run at all. So this should also serve as a disclaimer for this post. Take any Rust code you see here with a grain of salt. Just because it works, doesn't mean it is the best way (or even correct way). If you have suggestions or spotted big errors, please leave a comment.

## Returning vectors in Rust functions

What I meant with "rudimentary" above is that both packages only wrap one or two [crates](https://crates.io/)  and the most complex return values are vectors of strings, 'Vec<String>' in Rust terminology.

Here is for example a function that parses international phone numbers from `dialrs`
```rust
fn parse_phone_rs_international(phone: Vec<String>, country: &str) -> Vec<String> {
    let region = phonenumber::country::Id::from_str(country).ok();
    phone
        .into_iter()
        .map(
            |input| match phonenumber::parse(region, strip_hyphens(&input)) {
                Ok(number) => number.format().mode(Mode::International).to_string(),
                Err(_e) => String::new(),
            },
        )
        .collect()
}
```
and here is a function from `timeless` which tries to parse datetime from a string
```rust
fn parse_guess_rs(times: Vec<String>) -> Vec<String> {
    times
        .iter()
        .map(|input| match input.parse::<DateTimeUtc>() {
            Ok(value) => value
                .0
                .format("%Y-%m-%d %H:%M:%S")
                .to_string(),
            Err(_e) => "not found".to_string(),
        })
        .collect()
}
```


The input and output in both cases are just character vectors. [rextendr](https://github.com/extendr/rextendr) can deal with these return type (vectors) without issues. But what if we want to move beyond simple vectors?

## (Trying to) Return matrices in Rust functions

With my limited experience, I thought that something like `Vec<Vec<String>>` could be the right structure to return something "2 dimensional". While it actually does represent a 2D array-like structure, it does not enforce a strict rectangular shape. So each inner vector can have different lengths. So somewhat comparable to a List in R where all entries have to have the same type. So lets try to assemble a matrix-like list thing.
Before showing the Rust code, here is the equivalent in R.
```{r}
create_matrix <- function(n, m) {
  lapply(seq_len(n), function(r) (1:m) + (r - 1) * m)
}
create_matrix(n = 3, m = 4)
```

Now this is what it would look like in Rust.
```{r}
#| error: true
#| message: false
rextendr::rust_function(
  "fn create_matrix(n: usize, m: usize) -> Vec<Vec<usize>> {
    (0..n).map(|i| {
        (0..m).map(|j| i * m + j + 1).collect()
    }).collect()
  }"
)
```

Ok so this doesnt work. There is a lot going on in that error message but the important part is
```
the trait `From<Vec<Vec<usize>>>` is not implemented for `extendr_api::Robj`
``` 

What it tries to tell us is that we can't have `<Vec<Vec<usize>>` as a return value because it is not supported by the API that connects R and Rust.

Let us try it with the [nalgebra](https://crates.io/crates/nalgebra) crate which allows us to actually build matrices.
```{r}
#| error: true
#| message: false
code <- r"(
  use nalgebra::DMatrix;

  #[extendr]
  fn create_matrix(n: usize, m: usize) -> DMatrix<usize> {
      DMatrix::from_iterator(n, m, (1..=n * m))
  }
)"


rextendr::rust_source(
  code = code,
  dependencies = list(`nalgebra` = "0.33")
)
```

This looks pretty much like the same error. Something is not implemented that we need to transfer the Matrix to R. Maybe it is time to RTFM to understand what is going on.

## The R/Rust interface
 
Our situation is actually well described in the (work in progress) [user guide](https://extendr.github.io/user-guide/) of the crate `extendr-api` in the section about [macros](https://extendr.github.io/user-guide/type-mapping/extendr-macro.html). In order for an item to be returned to R from a function written in Rust, the return value must be able to be turned into an R object. This makes a lot of sense. Obviously, if R gets something that it doesn't understand, it cannot deal with it. But there is a way to MAKE R understand, even if it does not understand the original result.

The `ToVectorValue` trait is what is used to convert Rust items into R objects. We have seen this pop up in the last error message we got from the `nalgebra` crate. The trait is implemented on a number of standard Rust types such as i32, f64, usize, String and many more. So if any of these are returned, R knows what to do. 

You might now ask yourself: "What the hell is a trait?". It has something to do with types (something we do not care much about in R). Say you want to write a simple function to sum up two values:

```rust
fn add(x: i32, y: i32) -> i32 {
    x + y
}
```

This is fine, but as soon as you give this function something else than a `i32`, it errors. So if we want `add` to work for other types, we would have to create a function for every single number type there is (u32, f64 etc.). That would be quite cumbersome. How can we abstract this? The answer is traits. 

```rust
use std::ops::Add;

fn add<T: Add>(x: T, y: T) -> T {
    x + y
}
```

The trait `Add`, which looks like this

```rust
trait Add<Rhs = Self> {
    type Output;

    fn add(self, rhs: Rhs) -> Self::Output;
}
``` 

implements addition for a large variety of types (see [here](https://doc.rust-lang.org/nightly/std/ops/trait.Add.html#implementors)). But even if the type you need is not supported, you can implement it yourself with an `impl` block. 


## Implementing addition for a new struct
Say we have defined our own structure, a point, and we want to define addition of points.

```rust
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Self;

    fn add(self, other: Self) -> Self {
        Self {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}
```

In this example we define a structure that is a point with two `i32` coordinates and the `impl` block tells Rust how to use the Add trait for this structure. But as you might realize, we have again only defined the structure for one specific type, `i32`. We can extend it in a very similar way as above.

```rust
struct Point<T> {
    x: T,
    y: T,
}

impl<T: Add<Output = T>> Add for Point<T> {
    type Output = Self;

    fn add(self, other: Self) -> Self::Output {
        Self {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}
```

In pure Rust, you can now do

```rust
let p1 = Point { x: 1, y: 0 };
let p2 = Point { x: 2, y: 3 };
let p3 = p1 + p2;
```

## Bring it to R

Ok so that works in Rust, but how can we get this in R now?
My hope was, that I can just wrap the whole thing with rextendr and let it do its magic.

```{r}
#| error: true
#| message: false

code <- r"(
use std::ops::Add;

#[derive(Debug, Copy, Clone, PartialEq)]
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Self;

    fn add(self, other: Self) -> Self {
        Self {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}
)"

rextendr::rust_source(
  code = code
)
```

It actually does compile without an error, but there is nothing exported in R that we can use. After some testing, what we have to do is expose Point struct via an `impl` block and also expose the add function for points.

```{r}
#| error: true
#| message: false

code <- r"(
use std::ops::Add;

#[derive(Debug, Copy, Clone, PartialEq)]
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Self;

    fn add(self, other: Self) -> Self {
        Self {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}

#[extendr]
impl Point {
    fn new(x: i32, y: i32) -> Self {
        Self { x, y }
    }

    fn to_vec(&self) -> Vec<i32> {
        vec![self.x, self.y]
    }
}

#[extendr]
fn add_points(p1: Point, p2: Point) -> Point {
    p1 + p2
}
)"

rextendr::rust_source(
  code = code
)
```

Unfortunately, this does not work yet. The error says
```
the trait `From<extendr_api::Robj>` is not implemented for `Point`
```

Up to now, we have done everything so that R understands when it gets an object of type Point. But given that the function `add_points()` also has Point as input, we now need to make Rust understand when it gets a Point from R. This is done with a TryFrom block.


```{r}
#| error: true
#| message: false
#
code <- r"(
use std::ops::Add;
use extendr_api::*;
#[derive(Debug, Copy, Clone, PartialEq)]
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Self;

    fn add(self, other: Self) -> Self {
        Self {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}

impl TryFrom<Robj> for Point {
    type Error = Error;

    fn try_from(robj: Robj) -> Result<Self> {
        let vec: Vec<i32> = robj.as_integer_vector()
            .ok_or_else(|| Error::Other("Expected an integer vector of length 2".into()))?;
        if vec.len() != 2 {
            return Err(Error::Other("Point requires exactly two integers".into()));
        }
        Ok(Point { x: vec[0], y: vec[1] })
    }
}

#[extendr]
impl Point {
    fn new(x: i32, y: i32) -> Self {
        Self { x, y }
    }

    fn to_vec(&self) -> Vec<i32> {
        vec![self.x, self.y]
    }
}

#[extendr]
fn add_points(p1: Point, p2: Point) -> Point {
    p1 + p2
}
)"

rextendr::rust_source(
  code = code
)
```

Seems to be fine so lets try and use it.

```{r}
#| error: true

p1 <- Point$new(3L, 4L)
p2 <- Point$new(1L, 2L)
p1$to_vec()
p3 <- add_points(p1, p2)
```

Intuitively, I would have thought that this should work. But ultimately, I think it is clear why it doesnt. The TryFrom expects an integer vector of length two comming from R, not a Point object. So what will work is

```{r}
p3 <- add_points(c(3L, 4L), c(1L, 2L))
p3$to_vec()
```

Great, we managed with much trial-and-error to get a proper implementation. 

For completeness,
here is another version of the code that is a bit shorter and lets us do the addition with actual point type objects.


```{r}
#| error: true
#| message: false
code <- r"(
use extendr_api::prelude::*;
use std::ops::Add;

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Point {
    x: i32,
    y: i32,
}

#[extendr]
impl Point {
    fn new(x: i32, y: i32) -> Self {
        Point { x, y }
    }

    fn add(&self, other: &Point) -> Point {
        *self + *other
    }

    fn to_vec(&self) -> Vec<i32> {
        vec![self.x, self.y]
    }
}

impl Add for Point {
    type Output = Point;

    fn add(self, other: Point) -> Point {
        Point {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}
)"

rextendr::rust_source(
  code = code
)
```

We do have the same addition trait, but now we define the actual function within the Point block. That way, we can use it as follows

```{r}
p1 <- Point$new(3L, 4L)
p2 <- Point$new(1L, 2L)
p1$add(p2)$to_vec()
```

## Conclusion

We might not have implemented anything useful here, but I hope the rudimentary example tought as a few things.

- **Batteries included**: If all you do is moving vectors with standard type between R and Rust, you should be fine in most cases

- **Interface between R and Rust**: We need `impl` blocks and `TryFrom` to make R and Rust understand each other better for types that are not so standard.

- **Read the compiler messages**: I skipped some intermediary steps in my exploration, because there was much more trial-and-error than I showed. Many things can be fixed simply by reading the error messages provided by the compiler. In many cases, it let's you know what the fix is.

## Addendum

Shortly after publishing this post, I found that `extendr-api` actually supports matrices in some way ([link](https://docs.rs/extendr-api/latest/extendr_api/wrapper/matrix/type.RMatrix.html)). I try to explore this in a later post.
