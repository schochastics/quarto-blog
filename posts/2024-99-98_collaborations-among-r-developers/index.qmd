---
title: "Collaborations among R package developers"
author:
  - name: David Schoch
    orcid: 0000-0003-2952-4812
date: 2024-01-15
categories: [R, networks, data analysis]
---

Once upon a time I was a hardcore network scientist. These days though, they are more peripheral in my work and I just like to toy around with interesting datasets. One of those is the CRAN co-authorship, or *collaboration network*. This network can be easily assembled based on the authors field in all DESCRIPTION files of packages available on CRAN. I have done a low level analysis on [GitHub](https://github.com/schochastics/CRAN_collaboration), also featured in
[tidytuesday](https://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-09-19) and including the introduction of the Hadley number, but always wanted to do a longer write up. After reading [Working in Public: The Making and Maintenance of Open Source Software](https://press.stripe.com/working-in-public), I finally got the last bit of motivation for it. The book deals with modern Open Source development (mostly on GitHub) which is more collaborative than "in the old days". 

For this, I will not only use the data provided by CRAN, but also by [r-universe](https://r-universe.dev).


```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(igraph)
library(netUtils)
```

## Getting Data from CRAN and r-universe

It is actually quite easy to get all DESCRIPTION (and more!) metadata from CRAN. It is a single function call. 
```{r}
#| label: get-cran-data
#| eval: false
db <- tools::CRAN_package_db()
str(db)
```

```{r}
#| label: read-cran-data
#| echo: false
#| warning: false
db <- read_csv("db_2024-01-13.csv")
str(db)
```


```{r}
#| label: silent-source
#| echo: false
source("helpers.R")
```

The actual hard part is to clean up the authors field. I tried to to this semi-automatically with a [script](https://github.com/schochastics/CRAN_collaboration/blob/main/Rscripts/helpers.R) which was very tideous and I am sure I missed some.

```{r}
#| label: clean-authors
#| cache: true
author_pkg_cran <- author_cleaner(db)
```


```{r}
#| label: cleaned-authors
str(author_pkg_cran)
```

Getting the same kind of data from [r-universe](https://r-universe.dev) is, surprisingly, not complicated at all.

```{r}
#| label: get-runiverse-data
#| eval: false
url <- "https://r-universe.dev/stats/contributors"
download.file(url, destfile = "contributors.dev")
```

A little tricky is the reading of the data as it comes in ndjson format. I have started using [`yyjsonr`](https://github.com/coolbutuseless/yyjsonr) a while back for all my json needs, but the `ndjson` support was removed for the first CRAN submission. At the time of writing, you can install `yyjsonr` from a branch in the GitHub repository. 

```{r}
# remotes::install_github("coolbutuseless/yyjsonr",ref = "ndjson")
packageVersion("yyjsonr")
```


```{r}
#| label: read-runiverse-data
#| eval: false
contribs <- yyjsonr::read_ndjson_file("contributors.dev")
```

```{r}
#| label: read-runiverse-data-silent
#| echo: false
contribs <- yyjsonr::read_ndjson_file("contributors_2024-01-13.dev")
```

The data only needs minimal cleaning to be in usable form.

```{r}
#| label: clean-runiverse-data
author_pkg_runiv <- map_dfr(seq_len(length(contribs$login)), \(x) bind_cols(author = contribs$login[x], contribs$repos[[x]]))

author_pkg_runiv <- author_pkg_runiv |>
    mutate(
        package = word(upstream, -1, sep = "/"),
        owner = word(upstream, -2, sep = "/"),
        repo = paste0(owner, "/", package)
    ) |>
    filter(!owner %in% c("cran", "bioconductor"))
```

The r-universe dataset has the big advantage that there is no author cleaning required. We also get an aditional interesting stat to play with: how many contributions a developer made to a repository. 

## header

## CRAN collaboration network


```{r}
#| label: cran-network
author_pkg_cran_net <- netUtils::bipartite_from_data_frame(author_pkg_cran, "authorsR", "Package")
A <- as_biadjacency_matrix(author_pkg_cran_net, sparse = TRUE)
A <- as(A, "sparseMatrix")
B <- Matrix::t(A) %*% A
auth_auth_net <- graph_from_adjacency_matrix(B, "undirected", diag = FALSE, weighted = TRUE)
auth_auth_net
```


```{r}
#| label: cran-components

comps_cran <- components(auth_auth_net)
comps_cran$no
```


```{r}
#| label: largest-component
auth_auth_net_largest <- largest_component(auth_auth_net)
auth_auth_net_largest
```

## Six Degrees of Hadley Wickham

```{r}
#| label: hadley-number
#| echo: false
hadley_idx <- which(V(auth_auth_net_largest)$name == "Hadley Wickham")
author_tbl <- tibble(
    name = V(auth_auth_net_largest)$name,
    dist2HW = distances(auth_auth_net_largest, to = hadley_idx, weights = NA),
    cc = (1 / closeness(auth_auth_net_largest, weights = NA)) * 1 / vcount(auth_auth_net_largest)
)
```

If you are familiar with the [Erdős
number](https://en.wikipedia.org/wiki/Erd%C5%91s_number) number and/or
the [Bacon
number](https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon#Bacon_numbers)
then you know where this is going. The “Hadley number” is defined as the
distance of R developers to Hadley Wickham in the collaboration network.
Someone (“A”) who contributed to a package that Hadley has contributed
to has a Hadley number of 1. Someone who contributed to a package that A
has contributed to but not Hadley has Hadley number 2, and so on. Hadley
himself is the only person with Hadley number 0.

```{r}
#| label: plot-hadley
#| echo: false
author_tbl |>
    count(dist2HW) |>
    ggplot(aes(x = dist2HW, y = n)) +
    geom_col(color = "white", fill = "black") +
    theme_minimal() +
    theme(
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
    ) +
    scale_x_continuous(breaks = seq(0, 10), name = "Hadley Number")
```

The maximum Hadley number is `r max(author_tbl$dist2HW)` and the average is `r round(mean(author_tbl$dist2HW),2)`.

## The center of the collaboration network

The center of the collaboration network is defined as the developer
who’s average distance to all other developers is the lowest. The top
ten developers in that regard are shown below.


```{r}
#| echo: false
#| label: tbl-center
author_tbl |>
    select(name, centrality = cc) |>
    dplyr::top_n(10, -centrality) |>
    dplyr::arrange(centrality) |>
    knitr::kable()
```

## Explore

```{r}
#| label: reactable-hadley
#| echo: false

options(reactable.theme = reactable::reactableTheme(
    color = "hsl(233, 9%, 87%)",
    backgroundColor = "hsl(233, 9%, 19%)",
    borderColor = "hsl(233, 9%, 22%)",
    stripedColor = "hsl(233, 12%, 22%)",
    highlightColor = "hsl(233, 12%, 24%)",
    inputStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
    selectStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
    pageButtonHoverStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
    pageButtonActiveStyle = list(backgroundColor = "hsl(233, 9%, 28%)")
))

reactable::reactable(author_tbl,
    filterable = TRUE,
    minRows = 10,
    defaultSorted = list(dist2HW = "asc"),
    highlight = TRUE,
    striped = TRUE,
    showPageSizeOptions = TRUE
)
```

